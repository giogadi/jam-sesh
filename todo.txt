* SynthFilterCutoff stays at the client's default value after connecting and receiving the state sync.
* Add conflict resolution to server (and client too?)
  * Need a way to unit test the server!!!
* Get direct JSX debugging (maybe with react debugging browser plugin?)
* cleanups:
  * refactor synth seq and sampler seq to share more code
  * naming of "seq" vs "table" in client
  * replace state with automerge crdt
  * typescript?
  * Instead of blah[][][], break things down more.
  * consider going to sparse sequences for react state
  * have client get _all_ its important parameters from server so that they're ensured to have parameters in sync.
  * break stuff into smaller files
  * unit tests somehow?
* Customize synth sound
  + envelopes
* replace websocket library with something newer
* Put buttons and shit in the HTML, wtf dude?
* Populate scale dropdown from model
* Enable varying # of beats per loop
* Make BPM global.
* Sequencer
  * Enable changing transpose of sequencer (global)
* Add more sounds
  * Bass
  * pads
  * knobs
  * polyphony
* Another synth
* Investigate latency between making a change on one and hearing it on the other
  maybe just an issue with having the app in a background tab?
* Improve UI
  - Label stuff, lol
* Use binary comms between clients and server
* Enable multiple "rooms".
* Room is persistent.
* If anything in room was edited while one user was away, returning user can listen to how the loop changed, fast-forwarded. Just play the loop nonstop and playback all the edits made during that time. COOL
* (Maybe) encourage that people "fight" over each of the dials/instruments. If two people try to use same dial, the play rock-paper-scissors (or something) for control.