* Put buttons and shit in the HTML, wtf dude?
* Populate scale dropdown from model
* update stateChange() to just take the jam model
* Enable varying # of beats per loop
* Make BPM global.
* Add a flag to disable all networking (i.e., local client only)
* enable changing musical scale of sequencer
  ? What happens if you change the scale while there are already notes there?
    O1 Clear any notes that don't belong on the new scale
    O2 move all notes to the closest note in the new scale <-- maybe better, but will take longer.
  ? Should musical scale be only local UI or should it be a global setting?
    * global makes more sense, because you don't want 2 users programming different scales on it.
* Add more sounds
  * Bass
  * pads
  * knobs
  * polyphony
* Investigate latency between making a change on one and hearing it on the other
  maybe just an issue with having the app in a background tab?
* Improve UI
  - Label stuff, lol
* Use binary comms between clients and server
* Enable multiple "rooms".
* Room is persistent.
* If anything in room was edited while one user was away, returning user can listen to how the loop changed, fast-forwarded. Just play the loop nonstop and playback all the edits made during that time. COOL
* (Maybe) encourage that people "fight" over each of the dials/instruments. If two people try to use same dial, the play rock-paper-scissors (or something) for control.

Omfg. this must be THE PROJECT!!!